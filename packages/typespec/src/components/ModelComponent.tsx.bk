import { Children, For, Indent, Show, useScope } from "@alloy-js/core";
import { Documentation } from "./Documentation.jsx";
import { ModelPropertyComponent, ModelPropertyType } from "./ModelProperty.jsx";
import { DecoratorComponent } from "./DecoratorComponent.jsx";
import { FileScope } from "./scopes/file-scope.js";
import { addSymbol, getDecorators } from "./scopes/util.js";
import { NameComponent } from "./NameComponent.jsx";

export interface ModelProps {
  doc: string;
  name?: string;
  baseModel?: string;
  decorators?: Children;
  children?: Children;
  // model: Model;
}

export function ModelComponent(props: ModelProps) {
  const { doc, name, baseModel, decorators, children } = props;
  // const { $ } = useTsp();
  // const doc = $.type.getDoc(model);
  // const name = model.name;
  // const baseModel = model.baseModel;
  // const properties = [...model.properties.values()];
  // const decorators = getDecorators(model);
  // const scope = useScope();
  // addSymbol(model, scope as FileScope);

  // Group properties by their source: spreads vs regular properties
  // const { spreadGroups, regularProperties } =
  //   groupPropertiesBySource(properties);
  // const blankLineSeparator = regularProperties.length > 0 ? <hbr /> : undefined;

  return (
    <>
      <Show when={Boolean(doc)}>
        <Documentation doc={doc!} />
        <hbr />
      </Show>
      {{ decorators }}
      <Show when={Boolean(name)}>
        model <NameComponent name={name!} />
      </Show>
      <Show when={Boolean(baseModel)}>
        {" "}
        extends <ModelPropertyType type={baseModel!} />
      </Show>
      {" {"}
      <Indent>
        {/* Render spread statements */}
        <For hardline each={spreadGroups} ender={blankLineSeparator}>
          {(sourceModel) => (
            <>
              ...
              <ModelPropertyType type={sourceModel} />;
            </>
          )}
        </For>
        <For hardline each={regularProperties}>
          {(prop) => (
            <>
              <ModelPropertyComponent property={prop} />;
            </>
          )}
        </For>
      </Indent>
      <hbr />
      {"}"}
    </>
  );
}

/**
 * Groups properties into spread groups and regular properties
 */
function groupPropertiesBySource(properties: ModelProperty[]) {
  const spreadGroups: Model[] = [];
  const regularProperties: ModelProperty[] = [];
  const seenSourceModels = new Set<string>();

  for (const prop of properties) {
    if (
      prop.sourceProperty &&
      prop.sourceProperty.model &&
      prop.sourceProperty.model.name
    ) {
      const sourceModelName = prop.sourceProperty.model.name;
      if (!seenSourceModels.has(sourceModelName)) {
        spreadGroups.push(prop.sourceProperty.model);
        seenSourceModels.add(sourceModelName);
      }
      // Skip individual properties that come from spreads
    } else {
      // This is a regular property, not from a spread
      regularProperties.push(prop);
    }
  }

  return { spreadGroups, regularProperties };
}
